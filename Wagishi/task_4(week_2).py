git# -*- coding: utf-8 -*-
"""Task-4(Week-2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rNyjvtbtJ-NoYO2g8-lqFDjIknZV686F
"""

import numpy as np
np.random.seed(42)

W1 = np.random.randn(2,1)*0.1
b1 = np.zeros((1,1))

W2 = np.random.randn(1,1)*0.1
b2 = np.zeros((1,1))

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    s = sigmoid(x)
    return s * (1 - s)

def forward_pass(x):
    z1 = np.dot(x, W1) + b1
    a1 = sigmoid(z1)
    z2 = np.dot(a1, W2) + b2
    output = z2
    return output, a1, z1

X = np.array([
    [2, 2],
    [3, 4],
    [5, 7],
    [10, 15]
])
y = np.array([[4], [7], [12], [25]])

lr = 0.01
epochs = 5000

for epoch in range(epochs):
    total_loss = 0
    for i in range(len(X)):
        xi = X[i].reshape(1, -1)
        yi = y[i].reshape(1, -1)

        y_pred, a1, z1 = forward_pass(xi)

        loss = 0.5 * (yi - y_pred) ** 2
        total_loss += loss

        dL_dy = (y_pred - yi)

        dL_dW2 = np.dot(a1.T, dL_dy)
        dL_db2 = dL_dy

        dL_da1 = np.dot(dL_dy, W2.T)
        dL_dz1 = dL_da1 * sigmoid_derivative(z1)
        dL_dW1 = np.dot(xi.T, dL_dz1)
        dL_db1 = dL_dz1

        W2 -= lr * dL_dW2
        b2 -= lr * dL_db2
        W1 -= lr * dL_dW1
        b1 -= lr * dL_db1

    if epoch % 1000 == 0:
        print(f"Epoch {epoch}, Loss: {total_loss.sum()}")

for i in range(len(X)):
    pred, _, _ = forward_pass(X[i].reshape(1, -1))
    print(f"Input: {X[i]}, Prediction: {pred}, Target: {y[i]}")

