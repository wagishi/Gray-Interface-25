# -*- coding: utf-8 -*-
"""HackslashTask-5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y1zUsU3NV_QXrJ2APzM24mEesbnjtzku
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image as kp_image
from tensorflow.keras.applications import vgg19
from tensorflow.keras.models import Model
import time

# Function to load and preprocess images
def load_and_process_img(path_to_img):
    img = kp_image.load_img(path_to_img, target_size=(400, 400))
    img = kp_image.img_to_array(img)
    img = np.expand_dims(img, axis=0)
    img = vgg19.preprocess_input(img)
    return img

# Function to deprocess and visualize images
def deprocess_img(processed_img):
    x = processed_img.copy()
    if len(x.shape) == 4:
        x = np.squeeze(x, 0)
    x[:, :, 0] += 103.939
    x[:, :, 1] += 116.779
    x[:, :, 2] += 123.68
    x = x[:, :, ::-1]
    x = np.clip(x, 0, 255).astype('uint8')
    return x

content_path = 'content.jpg'
style_path = 'style.jpg'

content_img = load_and_process_img(content_path)
style_img = load_and_process_img(style_path)

plt.subplot(1,2,1)
plt.imshow(deprocess_img(content_img))
plt.title('Content Image')

plt.subplot(1,2,2)
plt.imshow(deprocess_img(style_img))
plt.title('Style Image')
plt.show()

# Layers to use for style and content
content_layers = ['block5_conv2']
style_layers = ['block1_conv1',
                'block2_conv1',
                'block3_conv1',
                'block4_conv1',
                'block5_conv1']

num_content_layers = len(content_layers)
num_style_layers = len(style_layers)

def get_model():
    vgg = vgg19.VGG19(include_top=False, weights='imagenet')
    vgg.trainable = False

    # Get outputs for style and content layers
    style_outputs = [vgg.get_layer(name).output for name in style_layers]
    content_outputs = [vgg.get_layer(name).output for name in content_layers]

    model_outputs = style_outputs + content_outputs
    return Model(vgg.input, model_outputs)

def get_feature_representations(model, content_img, style_img):

    content_outputs = model(content_img)
    style_outputs = model(style_img)

    style_features = [style_layer[0] for style_layer in style_outputs[:num_style_layers]]
    content_features = [content_layer[0] for content_layer in content_outputs[num_style_layers:]]
    return style_features, content_features

def gram_matrix(input_tensor):
    channels = int(input_tensor.shape[-1])
    a = tf.reshape(input_tensor, [-1, channels])
    n = tf.shape(a)[0]
    gram = tf.matmul(a, a, transpose_a=True)
    return gram / tf.cast(n, tf.float32)

def compute_loss(model, loss_weights, init_image, gram_style_features, content_features):
    style_weight, content_weight = loss_weights

    model_outputs = model(init_image)

    style_output_features = model_outputs[:num_style_layers]
    content_output_features = model_outputs[num_style_layers:]

    style_score = 0
    content_score = 0

    # Compute style loss
    weight_per_style_layer = 1.0 / float(num_style_layers)
    for target_style, comb_style in zip(gram_style_features, style_output_features):
        gram_comb_style = gram_matrix(comb_style[0])
        style_score += weight_per_style_layer * tf.reduce_mean(tf.square(gram_comb_style - target_style))

    # Compute content loss
    weight_per_content_layer = 1.0 / float(num_content_layers)
    for target_content, comb_content in zip(content_features, content_output_features):
        content_score += weight_per_content_layer * tf.reduce_mean(tf.square(comb_content[0] - target_content))

    style_score *= style_weight
    content_score *= content_weight

    loss = style_score + content_score
    return loss, style_score, content_score

# Initialize the image to content image
init_image = tf.Variable(content_img, dtype=tf.float32)

# Optimizer
opt = tf.optimizers.Adam(learning_rate=5.0, beta_1=0.99, epsilon=1e-1)

# Weights
style_weight = 1e-2
content_weight = 1e4
loss_weights = (style_weight, content_weight)



import tensorflow as tf

@tf.function()
def compute_grads(cfg):
    with tf.GradientTape() as tape:
        all_loss = compute_loss(**cfg)
    total_loss = all_loss[0]
    return tape.gradient(total_loss, cfg['init_image']), all_loss

# Prepare features
model = get_model()
style_features, content_features = get_feature_representations(model, content_img, style_img)
gram_style_features = [gram_matrix(style_feature) for style_feature in style_features]

cfg = {
    'model': model,
    'loss_weights': loss_weights,
    'init_image': init_image,
    'gram_style_features': gram_style_features,
    'content_features': content_features
}

# Training loop
epochs = 10
steps_per_epoch = 100

for n in range(epochs):
    for m in range(steps_per_epoch):
        grads, all_loss = compute_grads(cfg)
        loss, style_score, content_score = all_loss
        opt.apply_gradients([(grads, init_image)])
        clipped = tf.clip_by_value(init_image, -103.939, 255-103.939)
        init_image.assign(clipped)

    print(f"Epoch {n+1}: Total loss={loss}, Style loss={style_score}, Content loss={content_score}")

# Display final image
final_img = deprocess_img(init_image.numpy())
plt.imshow(final_img)
plt.title("Stylized Image")
plt.show()

layer_name = 'block1_conv1'  # Try different layers
feature_extractor = Model(inputs=model.input, outputs=model.get_layer(layer_name).output)
features = feature_extractor(content_img)

plt.figure(figsize=(15,15))
for i in range(16):  # Visualize first 16 filters
    plt.subplot(4,4,i+1)
    plt.imshow(features[0,:,:,i], cmap='viridis')
    plt.axis('off')
plt.show()



